#!/bin/bash

    project_dir=$(pwd)
    project_name=$(basename $project_dir)
    backup_dir=$(dirname $project_dir)/.saveWork_${project_name}_bkup
    mkdir -p $backup_dir


function get_backup_dir() {
    echo ${backup_dir}
}


function push_state {

    timestamp=$(date +%Y%m%d%H%M%S)
    backup_file="$backup_dir/backup-$project_name-$timestamp.tar.gz"
    tar -czf $backup_file -C $project_dir .
    echo "Pushed state: $backup_file"
}



function list_states {

    if [ ! -d "$backup_dir" ] || [ -z "$(ls -A $backup_dir)" ]; then
        echo "No saved states in ${backup_dir}."
        return
    fi
    
    backup_files=$(ls -t $backup_dir/backup-$project_name-*.tar.gz)

    echo "Saved states:"
    for backup_file in $backup_files; do
        timestamp=$(echo $backup_file | grep -o '[0-9]\{14\}')
        formatted_timestamp=$(date -j -f "%Y%m%d%H%M%S" "$timestamp" "+%Y-%m-%d %H:%M:%S")
        echo "$backup_file (created at $formatted_timestamp)"
    done
}

function pop_state {

    if [ ! -d "$backup_dir" ] || [ -z "$(ls -A $backup_dir)" ]; then
        echo "No saved states to pop."
        return
    fi

    latest_backup=$(ls -t $backup_dir/backup-$project_name-*.tar.gz | head -n 1)
    if [ "$1" != "merge" ]; then
        rm -r $project_dir/*
    fi
    tar -xzf $latest_backup -C $project_dir
    rm $latest_backup
    if [ "$1" != "merge" ]; then
	echo "popped state: $latest_backup"
    else
	echo "popped (merge) state: $latest_backup"
    fi
}

function restore_state {

    if [ ! -d "$backup_dir" ] || [ -z "$(ls -A $backup_dir)" ]; then
        echo "No saved states to restore."
        return
    fi

    latest_backup=$(ls -t $backup_dir/backup-$project_name-*.tar.gz | head -n 1)
    if [ "$1" != "merge" ]; then
        rm -r $project_dir/*
    fi
    tar -xzf $latest_backup -C $project_dir

    if [ "$1" != "merge" ]; then
	echo "restored state: $latest_backup"
    else
	echo "restored (merge) state: $latest_backup"
    fi
}

case "$1" in
    push)
        push_state
        ;;
    pop)
        pop_state "${@:2}"
        ;;
    restore)
        restore_state "${@:2}"
        ;;
    list)
        list_states
        ;;
    backup_dir)
	get_backup_dir
	;;
    *)
        echo "Usage: $0 {push|pop [merge]|restore [merge]|list|backup_dir}"
        echo "Commands:"
        echo "  push          - Save the current state."
        echo "  pop           - Restore the most recently saved state and remove it from the stack."
        echo "                  Use 'pop merge' to merge with current state."
        echo "  restore       - Restore the most recently saved state without removing it from the stack."
        echo "                  Use 'restore merge' to merge with current state."
        echo "  list          - List all saved states."
	echo "  backup_dir    - echo the directory path spec of the backup dir used for invokations in the"
	echo "                  current working directory."
        ;;
esac

